---
kind: pipeline
name: default

# Disable default clone
clone:
  disable: true

steps:
  # This clone step doesn't use "root" user
  #  - name: clone
  #    image: plugins/git:next

  # Restore cache of downloaded dependencies
  - name: restore-cache
    image: drillster/drone-volume-cache
    settings:
      restore: true
      mount:
        - .sbt
        - .ivy2
        - ui/node_modules
        - ui/bower_components
        - target
    volumes: [{name: cache, path: /cache}]

  # Run project tests
  #  - name: run-tests
  #    image: tooom/docker-scala-node
  #    commands:
  #      - . ~/.nvm/nvm.sh
  #      - sbt -Duser.home=$PWD test
  #
  #  # Build packages
  #  - name: build-packages
  #    image: tooom/docker-scala-node
  #    settings:
  #      pgp_key: {from_secret: pgp_key}
  #    commands:
  #      - |
  #        . ~/.nvm/nvm.sh
  #        [[ -n "$PLUGIN_PGP_KEY" ]] && gpg --batch --import - <<< $PLUGIN_PGP_KEY
  #        sbt -Duser.home=$PWD docker:stage debian:packageBin rpm:packageBin universal:packageBin
  #    when: {event: tag}
  #
  #  # Save external libraries in cache
  #  - name: save-cache
  #    image: drillster/drone-volume-cache
  #    settings:
  #      rebuild: true
  #      mount:
  #        - .sbt
  #        - .ivy2
  #        - ui/node_modules
  #        - ui/bower_components
  #        - target
  #    volumes: [{name: cache, path: /cache}]

  - name: publish-package
    image: tooom/docker-bintray
    settings:
      user: {from_secret: bintray_user}
      key: {from_secret: bintray_key}
      subject: thehive-project-staging
      package: thehive
    commands:
      - |
        VERSION=$(cut -d\" -f2 version.sbt)
        echo Publishing package version $DRONE_TAG ($VERSION)

        if echo $DRONE_TAG | grep -qi -E \
            -e '^[0-9]+\.[0-9]+\.[0-9]+$' \
            -e '^[0-9]+\.[0-9]+\.[0-9]+-[0-9]+$' \
            -e '^[0-9]+\.[0-9]+\.[0-9]+-RC[0-9]+$'; then
          echo The tag $DRONE_TAG is not a valid version
          exit 1
        fi

        CHANNEL=stable
        echo $DRONE-TAG | grep -qi rc  && CHANNEL=beta

        DEB_FILE=target/thehive_${VERSION}_all.deb
        RPM_FILE=target/rpm/RPMS/noarch/thehive-${VERSION}.noarch.rpm
        ZIP_FILE=target/universal/thehive-${VERSION}.zip

        upload \
          --file DEB_FILE \
          --repo debian-beta \
          --package thehive \
          --version $VERSION \
          --extra-param deb_distribution=any \
          --extra-param deb_component=main \
          --extra-param deb_architecture=all

        [[ $CHANNEL = stable ]] && upload \
          --file DEB_FILE \
          --repo debian-beta \
          --package thehive \
          --version $VERSION \
          --extra-param deb_distribution=any \
          --extra-param deb_component=main \
          --extra-param deb_architecture=all

        upload \
          --file RPM_FILE \
          --repo rpm-beta \
          --package thehive \
          --version $VERSION

        [[ $CHANNEL = stable ]] && upload \
          --file $RPM_FILE \
          --repo rpm-beta \
          --package thehive \
          --version $VERSION

        upload \
                --file $ZIP_FILE \
                --repo binary \
                --package thehive \
                --version $VERSION

        LATEST_VERSION=latest
        [[ $CHANNEL = beta ]] && LATEST_VERSION=latest-beta

        removeVersion \
          --repo binary \
          --package thehive \
          --version $LATEST_VERSION

        upload \
          --file $ZIP_FILE \
          --repo binary \
          --package thehive \
          --version $LATEST_VERSION \
          --dest-file thehive-${LATEST_VERSION}.zip

    when: {event: tag}

  # Publish docker image
  - name: docker
    image: plugins/docker
    settings:
      context: target/docker/stage
      dockerfile: target/docker/stage/Dockerfile
      repo: tooom/thehive
      auto_tag: true
      username: {from_secret: docker_username}
      password: {from_secret: docker_password}
    when: {event: tag}

volumes:
  - name: cache
    host:
      path: /opt/drone/cache
